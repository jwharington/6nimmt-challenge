#!/usr/bin/python3
# ===========================================================================
#
#                        6 NIMMT CODING CHALLANGE
#
# ===========================================================================
# Written by: John Wharington & Samuel Smith
# Date Created: 28 AUGUST 2020
#
# Description: Communicate with web server to play 6 Nimmt.
#
# ===========================================================================

import socket
import sys
import re
import random
import numpy as np
import functools

if (len(sys.argv) < 3):
    print(f"Usage: {sys.argv[0]} Name strategy")
    exit();

##########################################################
# Global variables
##########################################################

# Web server details
hostname = 'ipsm.makarta.com'
port = 9999

# my name
name = sys.argv[1]

# strategy switch
strategy = int(sys.argv[2])

# whether server is running, or we should exit
running = 1

# list of current players, score info
players = []
scores = {}
# value of card highest in each row
stacks_topcard = []
# number of cards played in each row
stacks_n = []
# total points in each row
stacks_points = []

# cards in the deck (used for counting)
deck = list(range(1,105))
# (note not all cards may be dealt out, depending on number of players)

##########################################################
# Utility functions
##########################################################

def send(buffer):
    print("> ", buffer)
    s.sendall((buffer+"\n\n").encode())

##########################################################
# Game logic
#
# Notes:
# -  assumes cards are sorted in increasing order
##########################################################

def find_nonfull_stacks():
    stack_bool = [x < 5 for x in stacks_n] # Find non-full stacks (i.e. less than 5 cards)
    nonfull_stacks = [i for i, val in enumerate(stack_bool) if val] # Get index of non-full stacks
    return nonfull_stacks

def calc_payoff(stack_value, free_slots, n_players, val_diff, pick, stack_idx):
    global cards, deck, stacks_topcard
    # look for safe option (assuming we haven't card counted)
    if (val_diff == 1):
        return 10000 - free_slots
        # refinements (where multiple 1 differences exist):
        # -- choose selection where only one slot free and this condition
        # -- choose selection based on card (save high or low cards etc)

    # top card: 50
    # our lowest card: 55
    # 3 slots free
    # four players
    # expected payoff:
    # - assuming random opponents
    #   - P(card played below us but above top)
    #   - probability that we will be pushed out
    #   - = probability there are three cards free in range [51-54]
    #   - random opponent:
    #      - n = number of cards free in range (hasn't been played that we dont have)
    #      - m = number of free cards
    #      P one card is played = n / m  = P1
    #      P second card = n-1 / m-1     = P2
    #      P j                           = Pj
    #      P three cards played (bad) = P1*P3*P3
    
    # Determine cards that fall inbetween stack topcard and closest hand card
    playable = list(filter(lambda x: x > stacks_topcard[stack_idx] and x < cards[pick], deck))
    
    # calculate probabilities of cards played fall in gap only if enough playable cards to push us out
    if len(playable) > n_players and n_players > free_slots:
        p = []
        for x in range(0, n_players):
            p.append((len(playable)-x)/(len(deck)-x))

        # calculate proability that we are pushed out = P1*P2...*Pj, where j - num of players
        ptot = functools.reduce(lambda a,b: a*b, p)
    
    # - assuming ideal opponent (deliberately trying to undercut)
    #   - probability that cards free in range are held by (free slots number) of players
    #   - full factorial lookahead
    #     - 10: 4^10 = around 1000000
    #     - iterate through, accumulate number of wins / total number
    #     - could factor in a play probability (trade off between random and ideal evil)
    #     - need to limit this to small ranges otherwise too intensive
    #     - eventually closed form
    #     - quick exit heuristics?

    # payoff is negative difference (maximising payoff)
    k1 = -1
    k2 = 1
    k3 = 0
    k4 = 1
    return -(k1*val_diff + k2*free_slots + k3*n_players)*stack_value**k4

def choose_stack_close(val_diff, val_stack, pick):
    # choose smallest difference
    # e.g. 3 players,
    #      diff 3, stack value 10
    #      diff 5, stack value 5

    payoff = []
    for i in range(0, len(val_diff)):
        sc = val_stack[i]
        payoff.append(calc_payoff(stacks_points[sc], 5-stacks_n[sc], len(players), val_diff[i], pick[i], sc))
    # print(payoff)

    # pick selection with best payoff
    return cards[pick[np.argmax(payoff)]]

def find_higher_card():
    global cards
    nonfull_stacks = find_nonfull_stacks()
    if len(nonfull_stacks) != 0:
        pick = []
        val_diff = []
        val_stack = []

        for sc in nonfull_stacks:
            diff = [x - stacks_topcard[sc] for x in cards] # Calculate difference between cards and non-full stack top card
            pdiff = [i for i in diff if i > 0]
            if (len(pdiff)>0):
                m = min(pdiff) # Find minimum difference > 0
                val_diff.append(m) # Store minimum difference > 0
                pick.append(diff.index(m)) # Get index of card
                val_stack.append(sc)
        if (len(val_diff)>0):
            return choose_stack_close(val_diff, val_stack, pick)
    return -1

def select_card():
    global cards
    print('cards: ', cards)
    if (strategy == 0):
        # pretty dumb, choose highest card
        c = cards[-1]
    elif (strategy == 1):
        # or choose completely random card
        c = random.choice(cards)

    elif (strategy == 2):
        # or choose card closest to one of stack top cards
        c = find_higher_card()
        # fallback if can't find a higher card
        if c< 0:
            # TODO: consider whether we want to play lowest to pick up a low value stack, or
            # play higher to increase chance someone else has to take the hit
            # TODO: move this into find_higher_card so we can include this in our list of actions for consideration
            c = random.choice(cards)
    else:
        # pretty dumb, choose lowest card
        c = cards[0]
    #
    # remove it after playing
    cards.remove(c)
    return c

def select_stack():
    # choose lowest stack
    best = -1
    i_best = -1
    for i in range(0,4):
        if (best == -1) or (stacks_points[i] < best):
            best = stacks_points[i]
            i_best = i
    return i_best+1
    # return random.randint(1, 4)

##########################################################
# Handlers for server events
##########################################################

def on_players(matchobj):
    global players
    # loads players into array and checks start condition
    # players are separated by spaces
    players = re.split(" ", matchobj.group(1))
    print('players: ', players)

def on_cards(matchobj):
    global cards, deck
    # line format: "card0 card1 .. cardn"
    cards_strings = re.split(" ", matchobj.group(1))
    # convert into integers
    cards = []
    cards = list(map(int, cards_strings))
    # remove cards from deck
    [deck.remove(c) for c in cards if c in deck]
    print('cards: ', cards)

def on_stacks(matchobj):
    global stacks_topcard, stacks_n, stacks_points
    stacks_topcard = []
    stacks_n = []
    stacks_points = []
    # parse each line, appending to lists
    stack_lines = re.split("\n", matchobj.group(1))
    for stack_line in stack_lines:
        # line format: "n points topcard"
        m = re.split(" ", stack_line)
        stacks_n.append(int(m[0]))
        stacks_points.append(int(m[1]))
        stacks_topcard.append(int(m[2]))
    print('stacks top card: ', stacks_topcard)
    print('stacks n: ', stacks_n)
    print('stacks points: ', stacks_points)

def on_scores(matchobj):
    global scores, running
    # loads players into array and checks start condition
    #
    # players are separated by spaces, "name1 value1 name2 value2 ... "
    scores_text = re.split('(.+? \d+) ', matchobj.group(1))
    for sc in scores_text:
        # separate name from value
        m = re.split(' ', sc)
        if (len(m)==2):
            # set value for name
            this_score = int(m[1])
            scores[m[0]] = this_score
            # finish when no cards left and someone has finished
            if ((len(cards)<1) and (this_score<=0)):
                running = 0
    print('scores: ', scores)

def on_card(matchobj):
    m = "card\n%d" % select_card()
    send(m)

def on_stack(matchobj):
    m = "stack\n%d" % select_stack()
    send(m)

def on_played(matchobj):
    global deck
    # split up players
    played_cards = re.split("\n", matchobj.group(1))
    for played in played_cards:
        # separate name from played card
        m = re.split(" ", played)
        # remove from deck if played
        if int(m[1]) in deck:
            deck.remove(int(m[1]))
    print(f"on_played TODO {matchobj.group(1)}")

def on_info(matchobj):
    print(f"info TODO {matchobj.group(1)}")

def on_server_message(matchobj):
    m =  matchobj.group(0)
    # parse each server response (eating the message when it matches, passing it unchanged if not found)
    m = re.sub("players\n(.*)\n\n", on_players, m, flags=re.DOTALL)
    m = re.sub("cards\n(.*)\n\n", on_cards, m, flags=re.DOTALL)
    m = re.sub("stacks\n(.*)\n\n", on_stacks, m, flags=re.DOTALL)
    m = re.sub("scores\n(.*)\n\n", on_scores, m, flags=re.DOTALL)

    m = re.sub("info\n(.*)\n\n", on_info, m, flags=re.DOTALL)
    m = re.sub("played\n(.*)\n\n", on_played, m, flags=re.DOTALL)

    m = re.sub("card\?\n\n", on_card, m, flags=re.DOTALL)
    m = re.sub("stack\?\n(.*)\n\n", on_stack, m, flags=re.DOTALL)
    # ...
    #
    # handle unexpected messages gracefully
    if (len(m)):
        print(f"Unexpected input '{m}'")
    # return blank, indicating this chunk is removed
    return ''

##########################################################
# Communications and main loop
##########################################################

# Create socket to communicate with server
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print('Socket successfully created')
except socket.error as err:
    print(f'Socket creation failed with error {err}')

# Get web server IP address
try:
    host_ip = socket.gethostbyname(hostname)
except socket.gaierror:
    print('There was an error resolving the host!')
    sys.exit()

# Establish connection with web server
s.connect((host_ip,port))
print(f'Successfully connected to host {hostname}\nIP: {host_ip} Port: {port}')

try:
    # Send message and wait for reply
    send(f'player\n{name}')
    buffer = ''
    while running:
        # read and decode message from server
        data = s.recv(32).decode('utf-8')
        # append to parse buffer
        buffer += data
        # split into chunks for processing (search for one or more characters up to double new line, non-greedy),
        # and call on_server_message on each chunk
        # if no match, buffer is returned unaffected
        # if one or more match, this eats up the match returning what's left over
        buffer = re.sub('.+?\n\n', on_server_message, buffer, flags=re.DOTALL)
    print('finished game')

finally:
    print('Closing socket')
    s.close()
