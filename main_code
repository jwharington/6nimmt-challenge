# ===========================================================================
#
#                        6 NIMMT CODING CHALLANGE
#
# ===========================================================================
# Written by: John Wharington & Samuel Smith
# Date Created: 28 AUGUST 2020
#
# Description: Communicate with web server to play 6 Nimmt.
#
# ===========================================================================

import socket
import sys
import re
import random

if (len(sys.argv) < 3):
    print(f"Usage: {sys.argv[0]} Name strategy")
    exit();

##########################################################
# Global variables
##########################################################

# Web server details
hostname = 'ipsm.makarta.com'
port = 9999

# my name
name = sys.argv[1]

# strategy switch
strategy = int(sys.argv[2])

# whether server is running, or we should exit
running = 1

# list of current players, score info
players = []
scores = {}
# value of card highest in each row
stacks_topcard = []
# number of cards played in each row
stacks_n = []
# total points in each row
stacks_points = []

##########################################################
# Utility functions
##########################################################

def send(buffer):
    print("> ", buffer)
    s.sendall((buffer+"\n\n").encode())

##########################################################
# Game logic
#
# Notes:
# -  assumes cards are sorted in increasing order
##########################################################

def select_card():
    global cards
    print('cards: ', cards)
    if (strategy == 0):
        # pretty dumb, choose highest card
        c = cards[-1]
    elif (strategy == 1):
        # or choose completely random card
        c = random.choice(cards)
    elif (strategy == 2):
        # or choose card closest to one of stack top cards                   
        pick = [] 
        diff = [] 
        # looping through stack top cards to find closest hand card 
        for n in stacks_topcard: 
            # Calculate difference between current stack top card and hand cards   
            diff_stack = np.array([i-n for i in cards]) 
            # Determine which hand cards are valid (i.e. > 0) for current stack
            valid_idx = np.where(diff_stack > 0)[0] 
            # Get index of valid hand card that gives lowest difference for current stack 
            pick.append(valid_idx[diff_stack[valid_idx].argmin()])
            # Get difference between picked card and and current stack top card
            diff.append(cards[pick[-1]]-n) 
        # Select hand card with minimum difference of any stack
        c = pick[np.argmin(diff)] 
        
        # To do: Implement below as a mask to avoid playing card that fills a stack.
        # stack_bool = [x < 5 for x in stacks_n] # Find non-full stacks (i.e. less than 5 cards)
     
    else:
        # pretty dumb, choose lowest card
        c = cards[0]
    #
    # remove it after playing
    cards.remove(c)
    return c

def select_stack():
    # choose lowest stack
    best = -1
    i_best = -1
    for i in range(0,4):
        if (best == -1) or (stacks_points[i] < best):
            best = stacks_points[i]
            i_best = i
    return i_best+1
    # return random.randint(1, 4)

##########################################################
# Handlers for server events
##########################################################

def on_players(matchobj):
    global players
    # loads players into array and checks start condition
    # players are separated by spaces
    players = re.split(" ", matchobj.group(1))
    print('players: ', players)

def on_cards(matchobj):
    global cards
    # line format: "card0 card1 .. cardn"
    cards_strings = re.split(" ", matchobj.group(1))
    # convert into integers
    cards = []
    cards = list(map(int, cards_strings))
    print('cards: ', cards)

def on_stacks(matchobj):
    global stacks_topcard, stacks_n, stacks_points
    stacks_topcard = []
    stacks_n = []
    stacks_points = []
    # parse each line, appending to lists
    stack_lines = re.split("\n", matchobj.group(1))
    for stack_line in stack_lines:
        # line format: "n points topcard"
        m = re.split(" ", stack_line)
        stacks_n.append(int(m[0]))
        stacks_points.append(int(m[1]))
        stacks_topcard.append(int(m[2]))
    print('stacks top card: ', stacks_topcard)
    print('stacks n: ', stacks_n)
    print('stacks points: ', stacks_points)

def on_scores(matchobj):
    global scores
    # loads players into array and checks start condition
    #
    # players are separated by spaces, "name1 value1 name2 value2 ... "
    scores_text = re.split('(.+? \d+) ', matchobj.group(1))
    for sc in scores_text:
        # separate name from value
        m = re.split(' ', sc)
        if (len(m)==2):
            # set value for name
            scores[m[0]] = int(m[1])
    print('scores: ', scores)

def on_card(matchobj):
    m = "card\n%d" % select_card()
    send(m)

def on_stack(matchobj):
    m = "stack\n%d" % select_stack()
    send(m)

def on_played(matchobj):
    print(f"on_played TODO {matchobj.group(1)}")

def on_info(matchobj):
    print(f"info TODO {matchobj.group(1)}")

def on_server_message(matchobj):
    m =  matchobj.group(0)
    # parse each server response (eating the message when it matches, passing it unchanged if not found)
    m = re.sub("players\n(.*)\n\n", on_players, m, flags=re.DOTALL)
    m = re.sub("cards\n(.*)\n\n", on_cards, m, flags=re.DOTALL)
    m = re.sub("stacks\n(.*)\n\n", on_stacks, m, flags=re.DOTALL)
    m = re.sub("scores\n(.*)\n\n", on_scores, m, flags=re.DOTALL)

    m = re.sub("info\n(.*)\n\n", on_info, m, flags=re.DOTALL)
    m = re.sub("played\n(.*)\n\n", on_played, m, flags=re.DOTALL)

    m = re.sub("card\?\n\n", on_card, m, flags=re.DOTALL)
    m = re.sub("stack\?\n(.*)\n\n", on_stack, m, flags=re.DOTALL)
    # ...
    #
    # handle unexpected messages gracefully
    if (len(m)):
        print(f"Unexpected input '{m}'")
    # return blank, indicating this chunk is removed
    return ''

##########################################################
# Communications and main loop
##########################################################

# Create socket to communicate with server
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print('Socket successfully created')
except socket.error as err:
    print(f'Socket creation failed with error {err}')

# Get web server IP address
try:
    host_ip = socket.gethostbyname(hostname)
except socket.gaierror:
    print('There was an error resolving the host!')
    sys.exit()

# Establish connection with web server
s.connect((host_ip,port))
print(f'Successfully connected to host {hostname}\nIP: {host_ip} Port: {port}')

try:
    # Send message and wait for reply
    send(f'player\n{name}')
    buffer = ''
    while running:
        # read and decode message from server
        data = s.recv(32).decode('utf-8')
        # append to parse buffer
        buffer += data
        # split into chunks for processing (search for one or more characters up to double new line, non-greedy),
        # and call on_server_message on each chunk
        # if no match, buffer is returned unaffected
        # if one or more match, this eats up the match returning what's left over
        buffer = re.sub('.+?\n\n', on_server_message, buffer, flags=re.DOTALL)

finally:
    print('Closing socket')
    s.close()
